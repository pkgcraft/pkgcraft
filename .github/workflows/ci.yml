name: ci

on:
  push:
    branches: ['**']
    paths:
      - "Cargo.*"
      - "crates/*/src/**"
      - "crates/*/tests/**"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [main]
    paths:
      - "Cargo.*"
      - "crates/*/src/**"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.vars.outputs.rust-version }}
    steps:
    - name: Checkout code to determine the minimum supported rust version
      uses: actions/checkout@v4

    - name: Set rust versions to test against
      id: vars
      run: |
        min_ver=$(sed -rn '/^rust-version\s*=/ s/^.*=\s*"([0-9](\.[0-9]+)+)(.*)/\1/p' Cargo.toml)
        if [[ -n ${min_ver} ]]; then
          echo "rust-version=['${min_ver}', 'stable']" >> $GITHUB_OUTPUT
        else
          exit 1
        fi

  test:
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust-version: ${{ fromJson(needs.setup.outputs.rust-version) }}

    steps:
    - name: Checkout pkgcraft workspace
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up rust toolchain
      uses: dtolnay/rust-toolchain@master
      id: rust
      with:
        toolchain: ${{ matrix.rust-version }}

    - name: Restore cache
      uses: actions/cache/restore@v3
      id: restore-cache
      with:
        path: |
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ github.workflow }}-${{ github.job }}-${{ runner.os }}-rust-${{ steps.rust.outputs.cachekey }}-cargo-${{ hashFiles('Cargo.lock') }}

    - name: Install protoc for arcanist
      uses: arduino/setup-protoc@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install cargo-nextest
      uses: taiki-e/install-action@nextest

    - name: Build and run tests
      run: cargo nextest run --color always --all-features --tests

    - name: Remove old caches
      if: ${{ github.ref_name == 'main' && steps.restore-cache.outputs.cache-hit != 'true' }}
      continue-on-error: true
      run: |
        gh extension install actions/gh-actions-cache

        REPO=${{ github.repository }}
        BRANCH=${{ github.ref }}
        KEY=${{ github.workflow }}-${{ github.job }}-${{ runner.os }}-rust-

        # find matching caches
        mapfile -t cache_keys < <( gh actions-cache list -R $REPO -B $BRANCH --key $KEY --sort created-at --order desc | cut -f 1 )

        # remove all matching caches except the most recently created
        for key in ${cache_keys[@]:1}
        do
          gh actions-cache delete $key -R $REPO -B $BRANCH --confirm
        done

        exit 0
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Save cache
      if: ${{ github.ref_name == 'main' && steps.restore-cache.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v3
      with:
        path: |
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ steps.restore-cache.outputs.cache-primary-key }}
