name: ci

on:
  push:
    branches: ['**']
    paths:
      - "Cargo.*"
      - "crates/*/build.rs"
      - "crates/*/src/**"
      - "crates/*/tests/**"
      - "testdata"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [main]
    paths:
      - "Cargo.*"
      - "crates/*/src/**"

jobs:
  msrv:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.msrv.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get the minimum supported rust version (MSRV)
      id: msrv
      run: |
        version=$(sed -rn '/^rust-version\s*=/ s/^.*=\s*"([0-9](\.[0-9]+)+)(.*)/\1/p' Cargo.toml)
        if [[ -n ${version} ]]; then
          echo "version=${version}" >> $GITHUB_OUTPUT
        else
          exit 1
        fi

  test:
    needs: msrv
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rust-version: ${{ needs.msrv.outputs.version }}
          - os: ubuntu-latest
            rust-version: stable

    steps:
    # see discussion on upstream issue: https://github.com/actions/runner-images/issues/10977
    - name: Disable man-db to make package install and removal faster
      run: |
        echo 'set man-db/auto-update false' | sudo debconf-communicate >/dev/null
        sudo dpkg-reconfigure man-db

    - name: Free disk space for coverage data
      if: ${{ matrix.rust-version == 'stable' && runner.os == 'Linux' }}
      uses: jlumbroso/free-disk-space@main
      timeout-minutes: 5
      with:
        android: true
        dotnet: true
        haskell: true
        docker-images: false
        tool-cache: false
        large-packages: true
        swap-storage: false

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up rust toolchain
      uses: dtolnay/rust-toolchain@master
      id: rust
      with:
        toolchain: ${{ matrix.rust-version }}
        components: llvm-tools-preview

    - name: Restore cache
      uses: actions/cache/restore@v4
      id: restore-cache
      with:
        path: |
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ github.workflow }}-${{ github.job }}-${{ runner.os }}-rust-${{ steps.rust.outputs.cachekey }}-cargo-${{ hashFiles('Cargo.lock') }}

    - name: Remove old caches
      if: ${{ matrix.rust-version != 'stable' && github.ref_name == 'main' && steps.restore-cache.outputs.cache-hit != 'true' }}
      continue-on-error: true
      run: |
        gh extension install actions/gh-actions-cache

        REPO=${{ github.repository }}
        BRANCH=${{ github.ref }}
        KEY=${{ github.workflow }}-${{ github.job }}-${{ runner.os }}-rust-

        # find matching caches
        mapfile -t cache_keys < <( gh actions-cache list -R $REPO -B $BRANCH --key $KEY --sort created-at --order desc | cut -f 1 )

        # remove all matching caches
        for key in ${cache_keys[@]}
        do
          gh actions-cache delete $key -R $REPO -B $BRANCH --confirm
        done

        exit 0
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install protoc for arcanist
      uses: taiki-e/install-action@protoc

    - name: Install cargo-llvm-cov
      if: ${{ matrix.rust-version == 'stable' && runner.os == 'Linux' }}
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Install grcov
      if: ${{ matrix.rust-version == 'stable' && runner.os == 'Linux' }}
      uses: taiki-e/install-action@grcov

    - name: Install cargo-nextest
      uses: taiki-e/install-action@nextest

    - name: Build and run tests
      run: |
        # only collect code coverage for the latest rust release on linux
        if [[ ${{ matrix.rust-version }} == 'stable' && ${{ runner.os }} == 'Linux' ]]; then
          # run tests while collecting coverage information
          cargo llvm-cov --no-report nextest --all-features --workspace --tests

          # process coverage information
          grcov . -s . --binary-path ./target/llvm-cov-target \
            --keep-only "crates/*/src/*" -t lcov --llvm --branch -o lcov.info \
            --excl-line "unreachable!(.*)|grcov-excl-line" \
            --excl-start grcov-excl-start \
            --excl-stop grcov-excl-stop

          # remove generated coverage data to avoid caching it
          find . -name \*.profraw -delete
        else
          cargo nextest run --all-features --workspace --tests
        fi

    - name: Upload build artifacts
      if: ${{ matrix.rust-version == 'stable' && runner.os == 'Linux' }}
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: lcov.info
        if-no-files-found: error
        retention-days: 3

    - name: Save cache
      if: ${{ github.ref_name == 'main' && steps.restore-cache.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        path: |
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
          target
        key: ${{ steps.restore-cache.outputs.cache-primary-key }}

  coverage:
    if: ${{ github.ref_name == 'main' }}
    needs: test
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage/lcov.info
        fail_ci_if_error: true
